
###############################################################
 General Information 
###############################################################

Formulation: ELLOUMI, loglevel: 1 , ratio: 0, 
timeout: 7200.0, threads: 1 

Problem parameters: 
 n = 20 
 p = 2 

Instance values: 
20×20 Named Array{Int64,2}
A ╲ B │   1    2    3    4    5    6    7  …   14   15   16   17   18   19   20
──────┼────────────────────────────────────────────────────────────────────────
1     │   0   94   30    0   34   84   94  …   41    9   52   42   59    7   58
2     │   5    0   88   64   27   69   87      16   92   89   37   46   97   49
3     │  28   11    0   55   16   74   90      69   82   84   93   28   62    9
4     │  54  100   22    0   16   54   81      36   15   74   16   50   19   60
5     │  64   24   92   48    0   85   69       0   80   80   15   81   71   63
6     │  43   36   14   14   74    0   84      14   67    8   67   14   90   46
7     │  97   90   75   50   61   60    0      97   83   33   84   36   76   61
8     │  54   58   81    5   58   16   22      39   29   56   35   76   14   16
9     │  91   15   49   38  100   19   61       9    5   96   16   89   10   35
⋮         ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮  ⋱    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮
12    │  66   68   70   18   26   14   35      51   66   97   64   46   18   70
13    │  87    3   89   19    8   95   96      78   68    8   35   45   44   50
14    │  21   88   39   91   46   80   98       0   95   78   17   51   62   46
15    │  39   27   69   22   73   24    1      96    0   70   26   73   64   37
16    │  92   26   70   78   53   43    1      25   55    0   89   62   78   29
17    │  88   95   64   74   33    7   28      76   11   30    0   39   13   59
18    │  66   25   76    0    9   88   42      17   30    2   18    0   13    8
19    │   2   38   51    6   57   71   54      59   61   63   55   81    0   38
20    │  54   84   15   55   75   36   38  …   76   83    6   77   48   56    0

D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
k = 96
Cgl0003I 10 fixed, 0 tightened bounds, 0 strengthened rows, 0 substitutions
Cgl0004I processed model has 1602 rows, 105 columns (105 integer (105 of which binary)) and 18714 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 65 integers unsatisfied sum - 16.0333
Cbc0038I Pass   1: suminf.    7.48077 (31) obj. 41.8846 iterations 124
Cbc0038I Pass   2: suminf.    2.50000 (5) obj. 49.5 iterations 75
Cbc0038I Pass   3: suminf.    2.50000 (5) obj. 49.5 iterations 9
Cbc0038I Pass   4: suminf.    2.00000 (4) obj. 50 iterations 12
Cbc0038I Pass   5: suminf.    2.00000 (4) obj. 50 iterations 23
Cbc0038I Pass   6: suminf.    5.37037 (29) obj. 55 iterations 68
Cbc0038I Pass   7: suminf.    3.40625 (20) obj. 55.8125 iterations 46
Cbc0038I Pass   8: suminf.    2.00000 (6) obj. 61 iterations 35
Cbc0038I Pass   9: suminf.    1.83333 (11) obj. 61 iterations 8
Cbc0038I Pass  10: suminf.    2.00000 (7) obj. 61 iterations 13
Cbc0038I Pass  11: suminf.    5.10000 (26) obj. 69.4 iterations 79
Cbc0038I Pass  12: suminf.    2.00000 (4) obj. 72 iterations 54
Cbc0038I Pass  13: suminf.    2.00000 (4) obj. 72 iterations 12
Cbc0038I Pass  14: suminf.    2.00000 (4) obj. 72 iterations 10
Cbc0038I Pass  15: suminf.    3.87500 (24) obj. 73.4844 iterations 67
Cbc0038I Pass  16: suminf.    2.63158 (17) obj. 74.0526 iterations 26
Cbc0038I Pass  17: suminf.    2.00000 (6) obj. 77 iterations 19
Cbc0038I Pass  18: suminf.    1.80000 (10) obj. 77.1 iterations 8
Cbc0038I Pass  19: suminf.    1.66667 (5) obj. 78 iterations 17
Cbc0038I Pass  20: suminf.    1.66667 (5) obj. 78 iterations 19
Cbc0038I Pass  21: suminf.    2.00000 (4) obj. 78 iterations 21
Cbc0038I Pass  22: suminf.    1.57143 (7) obj. 78 iterations 28
Cbc0038I Pass  23: suminf.    0.00000 (0) obj. 78 iterations 18
Cbc0038I Solution found of 78
Cbc0038I Rounding solution of 60 is better than previous of 78

Cbc0038I Before mini branch and bound, 17 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1602 rows 105 columns, reduced to 1417 rows 88 columns - 19 fixed gives 1048, 69 - still too large
Cbc0038I Full problem 1602 rows 105 columns, reduced to 1048 rows 69 columns - too large
Cbc0038I Mini branch and bound did not improve solution (0.33 seconds)
Cbc0038I Round again with cutoff of 56.5267
Cbc0038I Pass  24: suminf.    7.48077 (31) obj. 41.8846 iterations 0
Cbc0038I Pass  25: suminf.    1.80000 (6) obj. 55 iterations 157
Cbc0038I Pass  26: suminf.    0.00000 (0) obj. 55 iterations 22
Cbc0038I Solution found of 55
Cbc0038I Before mini branch and bound, 39 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1602 rows 105 columns, reduced to 1102 rows 66 columns - 42 fixed gives 64, 24 - ok now
Cbc0038I Full problem 1602 rows 105 columns, reduced to 23 rows 15 columns
Cbc0038I Mini branch and bound did not improve solution (0.40 seconds)
Cbc0038I Round again with cutoff of 50.0533
Cbc0038I Pass  27: suminf.    7.48077 (31) obj. 41.8846 iterations 0
Cbc0038I Pass  28: suminf.    2.00000 (4) obj. 50 iterations 117
Cbc0038I Pass  29: suminf.    2.00000 (4) obj. 50 iterations 10
Cbc0038I Pass  30: suminf.    2.00000 (4) obj. 50 iterations 24
Cbc0038I Pass  31: suminf.    7.74670 (33) obj. 50.0533 iterations 90
Cbc0038I Pass  32: suminf.    6.94670 (31) obj. 50.0533 iterations 33
Cbc0038I Pass  33: suminf.    6.91829 (31) obj. 50.0533 iterations 8
Cbc0038I Pass  34: suminf.    7.56989 (32) obj. 50.0533 iterations 55
Cbc0038I Pass  35: suminf.    6.19254 (32) obj. 50.0533 iterations 39
Cbc0038I Pass  36: suminf.    5.72089 (31) obj. 50.0533 iterations 22
Cbc0038I Pass  37: suminf.    6.98420 (28) obj. 50.0533 iterations 38
Cbc0038I Pass  38: suminf.    6.24436 (30) obj. 50.0533 iterations 31
Cbc0038I Pass  39: suminf.    6.24436 (30) obj. 50.0533 iterations 3
Cbc0038I Pass  40: suminf.    6.57170 (27) obj. 50.0533 iterations 35
Cbc0038I Pass  41: suminf.    6.03003 (30) obj. 50.0533 iterations 27
Cbc0038I Pass  42: suminf.    6.91729 (28) obj. 50.0533 iterations 64
Cbc0038I Pass  43: suminf.    6.24436 (30) obj. 50.0533 iterations 26
Cbc0038I Pass  44: suminf.    6.24436 (30) obj. 50.0533 iterations 3
Cbc0038I Pass  45: suminf.    6.33955 (31) obj. 50.0533 iterations 52
Cbc0038I Pass  46: suminf.    6.03003 (30) obj. 50.0533 iterations 24
Cbc0038I Pass  47: suminf.    6.99583 (29) obj. 50.0533 iterations 61
Cbc0038I Pass  48: suminf.    6.40503 (31) obj. 50.0533 iterations 39
Cbc0038I Pass  49: suminf.    6.24436 (30) obj. 50.0533 iterations 10
Cbc0038I Pass  50: suminf.    6.24436 (30) obj. 50.0533 iterations 1
Cbc0038I Pass  51: suminf.    6.69670 (27) obj. 50.0533 iterations 44
Cbc0038I Pass  52: suminf.    6.03003 (30) obj. 50.0533 iterations 33
Cbc0038I Pass  53: suminf.    6.85330 (28) obj. 50.0533 iterations 45
Cbc0038I Pass  54: suminf.    5.76488 (27) obj. 50.0533 iterations 31
Cbc0038I Pass  55: suminf.    5.72089 (31) obj. 50.0533 iterations 11
Cbc0038I Pass  56: suminf.    7.46185 (30) obj. 50.0533 iterations 37
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 32 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1602 rows 105 columns, reduced to 1190 rows 73 columns - 42 fixed gives 71, 31 - ok now
Cbc0038I Full problem 1602 rows 105 columns, reduced to 25 rows 18 columns
Cbc0038I Mini branch and bound did not improve solution (0.63 seconds)
Cbc0038I After 0.63 seconds - Feasibility pump exiting with objective of 55 - took 0.53 seconds
Cbc0012I Integer solution of 55 found by feasibility pump after 0 iterations and 0 nodes (0.63 seconds)
Cbc0038I Full problem 1602 rows 105 columns, reduced to 1093 rows 65 columns - 42 fixed gives 64, 23 - ok now
Cbc0031I 22 added rows had average density of 63.363636
Cbc0013I At root node, 22 cuts changed objective from 34.266112 to 37.681428 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.221 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 2424 row cuts average 73.9 elements, 0 column cuts (0 active)  in 0.344 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.078 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.011 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 1 row cuts average 29.0 elements, 0 column cuts (0 active)  in 0.648 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.025 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 244 row cuts average 49.4 elements, 0 column cuts (0 active)  in 0.241 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 55 best solution, best possible 37.6819 (8.95 seconds)

###############################################################
 Elloumi 
###############################################################

Y 
20-element Named Array{Float64,1}
A  │ 
───┼────
1  │ 0.0
2  │ 0.0
3  │ 0.0
4  │ 1.0
5  │ 1.0
6  │ 0.0
7  │ 0.0
8  │ 0.0
9  │ 0.0
⋮      ⋮
12 │ 0.0
13 │ 0.0
14 │ 0.0
15 │ 0.0
16 │ 0.0
17 │ 0.0
18 │ 0.0
19 │ 0.0
20 │ 0.0

uk: 1 dimensions:
[ 2] = 1.0
[ 3] = 1.0
[ 4] = 1.0
[ 5] = 1.0
[ 6] = 1.0
[ 7] = 1.0
[ 8] = 1.0
[ 9] = 1.0
[10] = 1.0
[11] = 1.0
[12] = 1.0
[13] = 1.0
[14] = 1.0
[15] = 1.0
[16] = 1.0
[17] = 1.0
[18] = 1.0
[19] = 1.0
[20] = 1.0
[21] = 1.0
[22] = 1.0
[23] = 1.0
[24] = 1.0
[25] = 1.0
[26] = 1.0
[27] = 1.0
[28] = 1.0
[29] = 1.0
[30] = 1.0
[31] = 1.0
[32] = 1.0
[33] = 1.0
[34] = 1.0
[35] = 1.0
[36] = 1.0
[37] = 1.0
[38] = 1.0
[39] = 1.0
[40] = 1.0
[41] = 1.0
[42] = 1.0
[43] = 1.0
[44] = 1.0
[45] = 1.0
[46] = 1.0
[47] = 1.0
[48] = 1.0
[49] = 1.0
[50] = 1.0
[51] = 1.0
[52] = 1.0
[53] = 0.0
[54] = 0.0
[55] = 0.0
[56] = 0.0
[57] = 0.0
[58] = 0.0
[59] = 0.0
[60] = 0.0
[61] = 0.0
[62] = 0.0
[63] = 0.0
[64] = 0.0
[65] = 0.0
[66] = 0.0
[67] = 0.0
[68] = 0.0
[69] = 0.0
[70] = 0.0
[71] = 0.0
[72] = 0.0
[73] = 0.0
[74] = 0.0
[75] = 0.0
[76] = 0.0
[77] = 0.0
[78] = 0.0
[79] = 0.0
[80] = 0.0
[81] = 0.0
[82] = 0.0
[83] = 0.0
[84] = 0.0
[85] = 0.0
[86] = 0.0
[87] = 0.0
[88] = 0.0
[89] = 0.0
[90] = 0.0
[91] = 0.0
[92] = 0.0
[93] = 0.0
[94] = 0.0
[95] = 0.0
[96] = 0.0

Optimal !
Objective function value is 55.0
Selected nodes: 4, 5
Cbc0030I Thread 0 used 30 times,  waiting to start 5.7220459e-06, 9.051697 cpu time, 157 locks, 0.0034234524 locked, 4.2915344e-05 waiting for locks
Cbc0030I Main thread 9.1569407 waiting for threads,  64 locks, 7.6770782e-05 locked, 6.1988831e-06 waiting for locks
Cbc0001I Search completed - best objective 55, took 16520 iterations and 30 nodes (18.01 seconds)
Cbc0032I Strong branching done 628 times (46009 iterations), fathomed 1 nodes and fixed 19 variables
Cbc0035I Maximum depth 14, 2 variables fixed on reduced cost
Total time (CPU seconds):       18.06   (Wallclock seconds):       18.23

