
###############################################################
 General Information 
###############################################################

Formulation: ELLOUMI, loglevel: 1 , ratio: 0, 
timeout: 7200.0, threads: 1 

Problem parameters: 
 n = 20 
 p = 4 

Instance values: 
20×20 Named Array{Int64,2}
A ╲ B │   1    2    3    4    5    6    7  …   14   15   16   17   18   19   20
──────┼────────────────────────────────────────────────────────────────────────
1     │   0   32   77   85   47   66   97  …   80   95   77   77    8   97   24
2     │  49    0   48   50   44   83   20      69   24   84   29   34   27    2
3     │  84   87    0   93   21   27   49      15    3   91   92    4   19   93
4     │  37   88   71    0   67   35   57      91   69   23   48   29   17   75
5     │  53   64   67   50    0   25   57      81   95   23   25   87   59   82
6     │  24   10   82   14   32    0   83      10   22   15   78   47   81   14
7     │  20   68   12   70   59   22    0      11   77   86   85   11   37    6
8     │  87   67   21   45   36   75    7      53   17   82   22   42   67   73
9     │  11   11   69  100   98   54   80      65   21   81   78   66   94    1
⋮         ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮  ⋱    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮
12    │  74   96   21   84    6   12   19      34   24   94   38   65   57   86
13    │   1   80   69   79   13    3   86       0   69   42   85   57   99   17
14    │  34   48   24   55    6   15    2       0    6    5   10   49   80   95
15    │  92   29   55   22   99   88   43      83    0   30    3   53   79   66
16    │  17   83   88    7   32   72   40      79   27    0   77   91   70   46
17    │  27   66   61    5   96   58   84      70   87   28    0   18   20   94
18    │  95   54   91   32   21   72   15      39   94   69   30    0   12   87
19    │   4    1   31   96   61    5   19      22   44   67    4   89    0   37
20    │  55   60   23   15   24   39    0  …   18   18   79    9   37   33    0

D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]
k = 97
Cgl0003I 7 fixed, 0 tightened bounds, 0 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 719 strengthened rows, 0 substitutions
Cgl0004I processed model has 1691 rows, 109 columns (109 integer (109 of which binary)) and 20620 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 32 integers unsatisfied sum - 9.25
Cbc0038I Pass   1: suminf.    6.80000 (29) obj. 16 iterations 39
Cbc0038I Pass   2: suminf.    3.85714 (16) obj. 18.5714 iterations 40
Cbc0038I Pass   3: suminf.    3.85714 (16) obj. 18.5714 iterations 11
Cbc0038I Pass   4: suminf.    4.00000 (8) obj. 24 iterations 37
Cbc0038I Pass   5: suminf.    3.00000 (6) obj. 24 iterations 39
Cbc0038I Pass   6: suminf.    3.00000 (6) obj. 24 iterations 22
Cbc0038I Pass   7: suminf.    0.00000 (0) obj. 24 iterations 21
Cbc0038I Solution found of 24
Cbc0038I Before mini branch and bound, 72 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1691 rows 109 columns, reduced to 586 rows 37 columns
Cbc0038I Mini branch and bound improved solution from 24 to 22 (0.19 seconds)
Cbc0038I Round again with cutoff of 20.4322
Cbc0038I Pass   8: suminf.    6.80000 (29) obj. 16 iterations 0
Cbc0038I Pass   9: suminf.    3.85714 (16) obj. 18.5714 iterations 38
Cbc0038I Pass  10: suminf.    3.85714 (16) obj. 18.5714 iterations 7
Cbc0038I Pass  11: suminf.    3.36777 (12) obj. 20.4322 iterations 39
Cbc0038I Pass  12: suminf.    2.74959 (12) obj. 20.4322 iterations 13
Cbc0038I Pass  13: suminf.    2.56777 (10) obj. 20.4322 iterations 10
Cbc0038I Pass  14: suminf.    3.06777 (7) obj. 20.4322 iterations 21
Cbc0038I Pass  15: suminf.    3.06777 (7) obj. 20.4322 iterations 6
Cbc0038I Pass  16: suminf.    3.06777 (7) obj. 20.4322 iterations 22
Cbc0038I Pass  17: suminf.    3.06777 (7) obj. 20.4322 iterations 8
Cbc0038I Pass  18: suminf.    3.06777 (7) obj. 20.4322 iterations 18
Cbc0038I Pass  19: suminf.    5.15951 (16) obj. 20.4322 iterations 30
Cbc0038I Pass  20: suminf.    4.42186 (17) obj. 20.4322 iterations 25
Cbc0038I Pass  21: suminf.    4.21429 (14) obj. 20.4286 iterations 13
Cbc0038I Pass  22: suminf.    5.03685 (19) obj. 20.4322 iterations 58
Cbc0038I Pass  23: suminf.    4.68269 (18) obj. 20.4322 iterations 25
Cbc0038I Pass  24: suminf.    7.22727 (25) obj. 15.8636 iterations 73
Cbc0038I Pass  25: suminf.    5.45000 (16) obj. 17.3 iterations 30
Cbc0038I Pass  26: suminf.    3.56777 (11) obj. 20.4322 iterations 42
Cbc0038I Pass  27: suminf.    3.56777 (13) obj. 20.4322 iterations 17
Cbc0038I Pass  28: suminf.    3.34554 (13) obj. 20.4322 iterations 6
Cbc0038I Pass  29: suminf.    2.22788 (18) obj. 20.4322 iterations 16
Cbc0038I Pass  30: suminf.    2.22788 (18) obj. 20.4322 iterations 3
Cbc0038I Pass  31: suminf.    5.55556 (18) obj. 16.8889 iterations 35
Cbc0038I Pass  32: suminf.    3.85714 (16) obj. 18.5714 iterations 29
Cbc0038I Pass  33: suminf.    3.85714 (16) obj. 18.5714 iterations 13
Cbc0038I Pass  34: suminf.    6.56777 (20) obj. 20.4322 iterations 75
Cbc0038I Pass  35: suminf.    5.23329 (18) obj. 20.4322 iterations 32
Cbc0038I Pass  36: suminf.    2.53829 (14) obj. 20.4322 iterations 15
Cbc0038I Pass  37: suminf.    2.23967 (10) obj. 20.4322 iterations 21
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 70 integers at bound fixed and 0 continuous
Cbc0038I Full problem 1691 rows 109 columns, reduced to 629 rows 39 columns
Cbc0038I Mini branch and bound did not improve solution (0.87 seconds)
Cbc0038I After 0.87 seconds - Feasibility pump exiting with objective of 22 - took 0.80 seconds
Cbc0012I Integer solution of 22 found by feasibility pump after 0 iterations and 0 nodes (0.87 seconds)
Cbc0038I Full problem 1691 rows 109 columns, reduced to 523 rows 32 columns
Cbc0031I 8 added rows had average density of 42.625
Cbc0013I At root node, 8 cuts changed objective from 15.321429 to 16.714486 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.159 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 914 row cuts average 45.8 elements, 0 column cuts (0 active)  in 0.131 seconds - new frequency is 1
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.042 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.006 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.359 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.015 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 185 row cuts average 38.9 elements, 0 column cuts (0 active)  in 0.120 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 22 best solution, best possible 20 (3.28 seconds)

###############################################################
 Elloumi 
###############################################################

Y 
20-element Named Array{Float64,1}
A  │ 
───┼────
1  │ 1.0
2  │ 0.0
3  │ 0.0
4  │ 1.0
5  │ 1.0
6  │ 0.0
7  │ 1.0
8  │ 0.0
9  │ 0.0
⋮      ⋮
12 │ 0.0
13 │ 0.0
14 │ 0.0
15 │ 0.0
16 │ 0.0
17 │ 0.0
18 │ 0.0
19 │ 0.0
20 │ 0.0

uk: 1 dimensions:
[ 2] = 1.0
[ 3] = 1.0
[ 4] = 1.0
[ 5] = 1.0
[ 6] = 1.0
[ 7] = 1.0
[ 8] = 1.0
[ 9] = 1.0
[10] = 1.0
[11] = 1.0
[12] = 1.0
[13] = 1.0
[14] = 1.0
[15] = 1.0
[16] = 1.0
[17] = 1.0
[18] = 1.0
[19] = 1.0
[20] = 1.0
[21] = 1.0
[22] = 1.0
[23] = 0.0
[24] = 0.0
[25] = 0.0
[26] = 0.0
[27] = 0.0
[28] = 0.0
[29] = 0.0
[30] = 0.0
[31] = 0.0
[32] = 0.0
[33] = 0.0
[34] = 0.0
[35] = 0.0
[36] = 0.0
[37] = 0.0
[38] = 0.0
[39] = 0.0
[40] = 0.0
[41] = 0.0
[42] = 0.0
[43] = 0.0
[44] = 0.0
[45] = 0.0
[46] = 0.0
[47] = 0.0
[48] = 0.0
[49] = 0.0
[50] = 0.0
[51] = 0.0
[52] = 0.0
[53] = 0.0
[54] = 0.0
[55] = 0.0
[56] = 0.0
[57] = 0.0
[58] = 0.0
[59] = 0.0
[60] = 0.0
[61] = 0.0
[62] = 0.0
[63] = 0.0
[64] = 0.0
[65] = 0.0
[66] = 0.0
[67] = 0.0
[68] = 0.0
[69] = 0.0
[70] = 0.0
[71] = 0.0
[72] = 0.0
[73] = 0.0
[74] = 0.0
[75] = 0.0
[76] = 0.0
[77] = 0.0
[78] = 0.0
[79] = 0.0
[80] = 0.0
[81] = 0.0
[82] = 0.0
[83] = 0.0
[84] = 0.0
[85] = 0.0
[86] = 0.0
[87] = 0.0
[88] = 0.0
[89] = 0.0
[90] = 0.0
[91] = 0.0
[92] = 0.0
[93] = 0.0
[94] = 0.0
[95] = 0.0
[96] = 0.0
[97] = 0.0

Optimal !
Objective function value is 22.0
Selected nodes: 1, 4, 5, 7
Cbc0030I Thread 0 used 2 times,  waiting to start 0.0025780201, 0.04971 cpu time, 9 locks, 0.00014209747 locked, 1.4305115e-06 waiting for locks
Cbc0030I Main thread 0.052988052 waiting for threads,  8 locks, 1.2397766e-05 locked, 1.6689301e-06 waiting for locks
Cbc0001I Search completed - best objective 22, took 5257 iterations and 2 nodes (3.33 seconds)
Cbc0032I Strong branching done 122 times (5037 iterations), fathomed 1 nodes and fixed 24 variables
Cbc0035I Maximum depth 0, 73 variables fixed on reduced cost
Total time (CPU seconds):       3.35   (Wallclock seconds):       3.37

