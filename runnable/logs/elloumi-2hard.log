
###############################################################
 General Information 
###############################################################

Formulation: ELLOUMI, loglevel: 1 , ratio: 0, 
timeout: 7200.0, threads: 1 

Problem parameters: 
 n = 100 
 p = 10 

Instance values: 
100×100 Named Array{Int64,2}
A ╲ B │   1    2    3    4    5    6    7  …   94   95   96   97   98   99  100
──────┼────────────────────────────────────────────────────────────────────────
1     │   0   24   73  145  106  118  151  …  102   77   66   77  107  101   94
2     │  24    0   49  121   82   94  142      78   53   42   53   83  125  118
3     │  73   49    0   72  108   86  154     127  102   91  102  132  161  167
4     │ 145  121   72    0   46   68  154     122   97   86   97  108  175  182
5     │ 106   82  108   46    0   22  108      76   51   40   51  105  129  136
6     │ 118   94   86   68   22    0   86      98   73   62   73  127  107  114
7     │ 151  142  154  154  108   86    0     136  111  100   89  143  113  120
8     │ 144  135  147  161  115   93    7     129  104   93   82  136  106  113
9     │ 196  187  199  213  167  145   59     181  156  145  134  188  158  165
⋮         ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮  ⋱    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮    ⋮
92    │  91   67  113   95   49   27  113     121  100   89  100  136  134  141
93    │ 113   89   91   73   27    5   91      99   78   67   78  132  112  119
94    │ 102   78  127  122   76   98  136       0   25   36   47  101  143  150
95    │  77   53  102   97   51   73  111      25    0   11   22   76  118  125
96    │  66   42   91   86   40   62  100      36   11    0   11   65  107  114
97    │  77   53  102   97   51   73   89      47   22   11    0   54   96  103
98    │ 107   83  132  108  105  127  143     101   76   65   54    0   69   76
99    │ 101  125  161  175  129  107  113     143  118  107   96   69    0    7
100   │  94  118  167  182  136  114  120  …  150  125  114  103   76    7    0

D = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 260, 261, 262, 263, 264, 265, 266, 267, 268, 272, 273, 274, 275, 276, 278, 279, 280, 281, 282, 284, 285, 286, 287, 298, 302, 316]
k = 283
Cgl0003I 54 fixed, 0 tightened bounds, 0 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 6621 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 3847 strengthened rows, 0 substitutions
Cgl0003I 0 fixed, 0 tightened bounds, 731 strengthened rows, 0 substitutions
Cgl0004I processed model has 16686 rows, 328 columns (328 integer (328 of which binary)) and 896640 elements
Cutoff increment increased from 1e-05 to 0.9999
Cbc0038I Initial state - 127 integers unsatisfied sum - 26.5733
Cbc0038I Pass   1: (26.87 seconds) suminf.   12.63781 (73) obj. 92.8225 iterations 365
Cbc0038I Pass   2: (27.40 seconds) suminf.   11.75000 (59) obj. 93.25 iterations 153
Cbc0038I Pass   3: (27.66 seconds) suminf.   11.60777 (66) obj. 93.5018 iterations 61
Cbc0038I Pass   4: (28.73 seconds) suminf.    3.00000 (10) obj. 102 iterations 346
Cbc0038I Pass   5: (28.91 seconds) suminf.    2.93333 (16) obj. 102.067 iterations 63
Cbc0038I Pass   6: (29.13 seconds) suminf.    0.00000 (0) obj. 103 iterations 83
Cbc0038I Solution found of 103
Cbc0038I Rounding solution of 102 is better than previous of 103

Cbc0038I Before mini branch and bound, 190 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16686 rows 328 columns, reduced to 9134 rows 138 columns - 13 fixed gives 5974, 125 - ok now
Cbc0038I Full problem 16686 rows 328 columns, reduced to 5974 rows 125 columns
Cbc0038I Mini branch and bound improved solution from 102 to 101 (61.77 seconds)
Cbc0038I Round again with cutoff of 98.6041
Cbc0038I Reduced cost fixing fixed 1 variables on major pass 2
Cbc0038I Pass   7: (61.95 seconds) suminf.   12.63781 (73) obj. 92.8225 iterations 0
Cbc0038I Pass   8: (62.68 seconds) suminf.   11.75000 (59) obj. 93.25 iterations 200
Cbc0038I Pass   9: (62.92 seconds) suminf.   11.60777 (66) obj. 93.5018 iterations 50
Cbc0038I Pass  10: (64.13 seconds) suminf.    8.95870 (45) obj. 98.6041 iterations 387
Cbc0038I Pass  11: (64.39 seconds) suminf.    7.51137 (55) obj. 98.6041 iterations 73
Cbc0038I Pass  12: (64.90 seconds) suminf.    5.50578 (39) obj. 98.6041 iterations 169
Cbc0038I Pass  13: (65.13 seconds) suminf.    4.30457 (39) obj. 98.6041 iterations 54
Cbc0038I Pass  14: (65.81 seconds) suminf.    6.46797 (26) obj. 98.6041 iterations 273
Cbc0038I Pass  15: (66.10 seconds) suminf.    5.19796 (27) obj. 98.6041 iterations 94
Cbc0038I Pass  16: (66.42 seconds) suminf.    1.52709 (48) obj. 98.6041 iterations 106
Cbc0038I Pass  17: (67.18 seconds) suminf.    0.84603 (97) obj. 98.6041 iterations 206
Cbc0038I Pass  18: (67.90 seconds) suminf.   11.91156 (51) obj. 92.8798 iterations 200
Cbc0038I Pass  19: (68.13 seconds) suminf.   11.05085 (48) obj. 93.678 iterations 48
Cbc0038I Pass  20: (68.85 seconds) suminf.    4.33136 (23) obj. 98.6041 iterations 274
Cbc0038I Pass  21: (69.29 seconds) suminf.    3.00000 (6) obj. 98 iterations 145
Cbc0038I Pass  22: (69.79 seconds) suminf.    0.00000 (0) obj. 98 iterations 118
Cbc0038I Solution found of 98
Cbc0038I Before mini branch and bound, 185 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16686 rows 328 columns, reduced to 9347 rows 143 columns - 44 fixed gives 542, 98 - ok now
Cbc0038I Full problem 16686 rows 328 columns, reduced to 206 rows 78 columns
Cbc0038I Mini branch and bound did not improve solution (76.13 seconds)
Cbc0038I Round again with cutoff of 94.8081
Cbc0038I Reduced cost fixing fixed 2 variables on major pass 3
Cbc0038I Pass  23: (76.31 seconds) suminf.   12.63781 (73) obj. 92.8225 iterations 0
Cbc0038I Pass  24: (76.94 seconds) suminf.   11.75000 (59) obj. 93.25 iterations 174
Cbc0038I Pass  25: (77.23 seconds) suminf.   11.60777 (66) obj. 93.5018 iterations 73
Cbc0038I Pass  26: (78.35 seconds) suminf.    8.97804 (45) obj. 94.8081 iterations 367
Cbc0038I Pass  27: (78.66 seconds) suminf.    8.85146 (74) obj. 94.8081 iterations 84
Cbc0038I Pass  28: (79.26 seconds) suminf.   10.96186 (54) obj. 94.8081 iterations 225
Cbc0038I Pass  29: (79.59 seconds) suminf.    8.93888 (57) obj. 94.8081 iterations 107
Cbc0038I Pass  30: (79.80 seconds) suminf.    8.80107 (53) obj. 94.8081 iterations 48
Cbc0038I Pass  31: (80.06 seconds) suminf.    8.11514 (49) obj. 94.8081 iterations 85
Cbc0038I Pass  32: (80.48 seconds) suminf.    8.61617 (48) obj. 94.8081 iterations 157
Cbc0038I Pass  33: (80.74 seconds) suminf.    8.43381 (79) obj. 94.8081 iterations 73
Cbc0038I Pass  34: (81.28 seconds) suminf.   13.75000 (35) obj. 92.75 iterations 214
Cbc0038I Pass  35: (81.74 seconds) suminf.    9.64354 (40) obj. 94.8081 iterations 159
Cbc0038I Pass  36: (81.98 seconds) suminf.    8.49985 (46) obj. 94.8081 iterations 64
Cbc0038I Pass  37: (82.31 seconds) suminf.    8.18790 (43) obj. 94.8081 iterations 98
Cbc0038I Pass  38: (82.59 seconds) suminf.    8.46323 (41) obj. 94.8081 iterations 95
Cbc0038I Pass  39: (82.94 seconds) suminf.    8.10612 (71) obj. 94.8081 iterations 115
Cbc0038I Pass  40: (83.34 seconds) suminf.    8.93183 (45) obj. 94.8081 iterations 137
Cbc0038I Pass  41: (83.64 seconds) suminf.    8.24533 (43) obj. 94.8081 iterations 90
Cbc0038I Pass  42: (84.18 seconds) suminf.   14.47706 (64) obj. 92.2294 iterations 212
Cbc0038I Pass  43: (84.46 seconds) suminf.   13.14474 (51) obj. 92.5132 iterations 87
Cbc0038I Pass  44: (84.67 seconds) suminf.   11.05310 (61) obj. 93.708 iterations 54
Cbc0038I Pass  45: (85.43 seconds) suminf.   12.69823 (79) obj. 94.8081 iterations 284
Cbc0038I Pass  46: (86.01 seconds) suminf.   12.17379 (79) obj. 94.8081 iterations 181
Cbc0038I Pass  47: (86.60 seconds) suminf.   14.19192 (29) obj. 94.8081 iterations 189
Cbc0038I Pass  48: (87.30 seconds) suminf.   13.69192 (35) obj. 94.8081 iterations 188
Cbc0038I Pass  49: (87.50 seconds) suminf.   13.69192 (35) obj. 94.8081 iterations 33
Cbc0038I Pass  50: (87.74 seconds) suminf.   13.69192 (35) obj. 94.8081 iterations 48
Cbc0038I Pass  51: (88.51 seconds) suminf.   11.63898 (55) obj. 94.8081 iterations 260
Cbc0038I Pass  52: (88.98 seconds) suminf.    9.07154 (42) obj. 94.8081 iterations 159
Cbc0038I No solution found this major pass
Cbc0038I Before mini branch and bound, 176 integers at bound fixed and 0 continuous
Cbc0038I Full problem 16686 rows 328 columns, reduced to 9763 rows 152 columns - 45 fixed gives 565, 103 - ok now
Cbc0038I Full problem 16686 rows 328 columns, reduced to 214 rows 81 columns
Cbc0038I Mini branch and bound did not improve solution (95.79 seconds)
Cbc0038I After 95.79 seconds - Feasibility pump exiting with objective of 98 - took 70.34 seconds
Cbc0012I Integer solution of 98 found by feasibility pump after 0 iterations and 0 nodes (95.82 seconds)
Cbc0038I Full problem 16686 rows 328 columns, reduced to 8647 rows 128 columns - 44 fixed gives 525, 83 - ok now
Cbc0031I 18 added rows had average density of 172.5
Cbc0013I At root node, 18 cuts changed objective from 86.039982 to 87.311255 in 100 passes
Cbc0014I Cut generator 0 (Probing) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 10.810 seconds - new frequency is -100
Cbc0014I Cut generator 1 (Gomory) - 2868 row cuts average 167.3 elements, 0 column cuts (0 active)  in 12.673 seconds - new frequency is -100
Cbc0014I Cut generator 2 (Knapsack) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.683 seconds - new frequency is -100
Cbc0014I Cut generator 3 (Clique) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 0.234 seconds - new frequency is -100
Cbc0014I Cut generator 4 (MixedIntegerRounding2) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 53.910 seconds - new frequency is -100
Cbc0014I Cut generator 5 (FlowCover) - 0 row cuts average 0.0 elements, 0 column cuts (0 active)  in 1.026 seconds - new frequency is -100
Cbc0014I Cut generator 6 (TwoMirCuts) - 586 row cuts average 152.6 elements, 0 column cuts (0 active)  in 4.403 seconds - new frequency is 1
Cbc0010I After 0 nodes, 1 on tree, 98 best solution, best possible 87.311255 (406.67 seconds)

###############################################################
 Elloumi 
###############################################################

Y 
100-element Named Array{Float64,1}
A   │ 
────┼────
1   │ 0.0
2   │ 0.0
3   │ 0.0
4   │ 0.0
5   │ 0.0
6   │ 0.0
7   │ 1.0
8   │ 0.0
9   │ 0.0
⋮       ⋮
92  │ 0.0
93  │ 0.0
94  │ 0.0
95  │ 0.0
96  │ 1.0
97  │ 0.0
98  │ 1.0
99  │ 0.0
100 │ 0.0

uk: 1 dimensions:
[  2] = 1.0
[  3] = 1.0
[  4] = 1.0
[  5] = 1.0
[  6] = 1.0
[  7] = 1.0
[  8] = 1.0
[  9] = 1.0
[ 10] = 1.0
[ 11] = 1.0
[ 12] = 1.0
[ 13] = 1.0
[ 14] = 1.0
[ 15] = 1.0
[ 16] = 1.0
[ 17] = 1.0
[ 18] = 1.0
[ 19] = 1.0
[ 20] = 1.0
[ 21] = 1.0
[ 22] = 1.0
[ 23] = 1.0
[ 24] = 1.0
[ 25] = 1.0
[ 26] = 1.0
[ 27] = 1.0
[ 28] = 1.0
[ 29] = 1.0
[ 30] = 1.0
[ 31] = 1.0
[ 32] = 1.0
[ 33] = 1.0
[ 34] = 1.0
[ 35] = 1.0
[ 36] = 1.0
[ 37] = 1.0
[ 38] = 1.0
[ 39] = 1.0
[ 40] = 1.0
[ 41] = 1.0
[ 42] = 1.0
[ 43] = 1.0
[ 44] = 1.0
[ 45] = 1.0
[ 46] = 1.0
[ 47] = 1.0
[ 48] = 1.0
[ 49] = 1.0
[ 50] = 1.0
[ 51] = 1.0
[ 52] = 1.0
[ 53] = 1.0
[ 54] = 1.0
[ 55] = 1.0
[ 56] = 1.0
[ 57] = 1.0
[ 58] = 1.0
[ 59] = 1.0
[ 60] = 1.0
[ 61] = 1.0
[ 62] = 1.0
[ 63] = 1.0
[ 64] = 1.0
[ 65] = 1.0
[ 66] = 1.0
[ 67] = 1.0
[ 68] = 1.0
[ 69] = 1.0
[ 70] = 1.0
[ 71] = 1.0
[ 72] = 1.0
[ 73] = 1.0
[ 74] = 1.0
[ 75] = 1.0
[ 76] = 1.0
[ 77] = 1.0
[ 78] = 1.0
[ 79] = 1.0
[ 80] = 1.0
[ 81] = 1.0
[ 82] = 1.0
[ 83] = 1.0
[ 84] = 1.0
[ 85] = 1.0
[ 86] = 1.0
[ 87] = 1.0
[ 88] = 1.0
[ 89] = 1.0
[ 90] = 1.0
[ 91] = 1.0
[ 92] = 1.0
[ 93] = 1.0
[ 94] = 1.0
[ 95] = 1.0
[ 96] = 1.0
[ 97] = 1.0
[ 98] = 0.0
[ 99] = 0.0
[100] = 0.0
[101] = 0.0
[102] = 0.0
[103] = 0.0
[104] = 0.0
[105] = 0.0
[106] = 0.0
[107] = 0.0
[108] = 0.0
[109] = 0.0
[110] = 0.0
[111] = 0.0
[112] = 0.0
[113] = 0.0
[114] = 0.0
[115] = 0.0
[116] = 0.0
[117] = 0.0
[118] = 0.0
[119] = 0.0
[120] = 0.0
[121] = 0.0
[122] = 0.0
[123] = 0.0
[124] = 0.0
[125] = 0.0
[126] = 0.0
[127] = 0.0
[128] = 0.0
[129] = 0.0
[130] = 0.0
[131] = 0.0
[132] = 0.0
[133] = 0.0
[134] = 0.0
[135] = 0.0
[136] = 0.0
[137] = 0.0
[138] = 0.0
[139] = 0.0
[140] = 0.0
[141] = 0.0
[142] = 0.0
[143] = 0.0
[144] = 0.0
[145] = 0.0
[146] = 0.0
[147] = 0.0
[148] = 0.0
[149] = 0.0
[150] = 0.0
[151] = 0.0
[152] = 0.0
[153] = 0.0
[154] = 0.0
[155] = 0.0
[156] = 0.0
[157] = 0.0
[158] = 0.0
[159] = 0.0
[160] = 0.0
[161] = 0.0
[162] = 0.0
[163] = 0.0
[164] = 0.0
[165] = 0.0
[166] = 0.0
[167] = 0.0
[168] = 0.0
[169] = 0.0
[170] = 0.0
[171] = 0.0
[172] = 0.0
[173] = 0.0
[174] = 0.0
[175] = 0.0
[176] = 0.0
[177] = 0.0
[178] = 0.0
[179] = 0.0
[180] = 0.0
[181] = 0.0
[182] = 0.0
[183] = 0.0
[184] = 0.0
[185] = 0.0
[186] = 0.0
[187] = 0.0
[188] = 0.0
[189] = 0.0
[190] = 0.0
[191] = 0.0
[192] = 0.0
[193] = 0.0
[194] = 0.0
[195] = 0.0
[196] = 0.0
[197] = 0.0
[198] = 0.0
[199] = 0.0
[200] = 0.0
[201] = 0.0
[202] = 0.0
[203] = 0.0
[204] = 0.0
[205] = 0.0
[206] = 0.0
[207] = 0.0
[208] = 0.0
[209] = 0.0
[210] = 0.0
[211] = 0.0
[212] = 0.0
[213] = 0.0
[214] = 0.0
[215] = 0.0
[216] = 0.0
[217] = 0.0
[218] = 0.0
[219] = 0.0
[220] = 0.0
[221] = 0.0
[222] = 0.0
[223] = 0.0
[224] = 0.0
[225] = 0.0
[226] = 0.0
[227] = 0.0
[228] = 0.0
[229] = 0.0
[230] = 0.0
[231] = 0.0
[232] = 0.0
[233] = 0.0
[234] = 0.0
[235] = 0.0
[236] = 0.0
[237] = 0.0
[238] = 0.0
[239] = 0.0
[240] = 0.0
[241] = 0.0
[242] = 0.0
[243] = 0.0
[244] = 0.0
[245] = 0.0
[246] = 0.0
[247] = 0.0
[248] = 0.0
[249] = 0.0
[250] = 0.0
[251] = 0.0
[252] = 0.0
[253] = 0.0
[254] = 0.0
[255] = 0.0
[256] = 0.0
[257] = 0.0
[258] = 0.0
[259] = 0.0
[260] = 0.0
[261] = 0.0
[262] = 0.0
[263] = 0.0
[264] = 0.0
[265] = 0.0
[266] = 0.0
[267] = 0.0
[268] = 0.0
[269] = 0.0
[270] = 0.0
[271] = 0.0
[272] = 0.0
[273] = 0.0
[274] = 0.0
[275] = 0.0
[276] = 0.0
[277] = 0.0
[278] = 0.0
[279] = 0.0
[280] = 0.0
[281] = 0.0
[282] = 0.0
[283] = 0.0

Optimal !
Objective function value is 98.0
Selected nodes: 7, 11, 16, 32, 47, 60, 68, 77, 96, 98
Cbc0030I Thread 0 used 272 times,  waiting to start 0.23685622, 1440.4424 cpu time, 1267 locks, 0.12990379 locked, 0.00035357475 waiting for locks
Cbc0030I Main thread 1460.8798 waiting for threads,  548 locks, 0.00058197975 locked, 3.1471252e-05 waiting for locks
Cbc0001I Search completed - best objective 98, took 119340 iterations and 272 nodes (1847.23 seconds)
Cbc0032I Strong branching done 1610 times (115597 iterations), fathomed 8 nodes and fixed 3 variables
Cbc0035I Maximum depth 21, 3988 variables fixed on reduced cost
Total time (CPU seconds):       1850.98   (Wallclock seconds):       1873.76

